(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{604:function(e,a,r){"use strict";r.r(a);var s=r(35),_=Object(s.a)({},(function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"scheduler"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#scheduler"}},[e._v("#")]),e._v(" Scheduler")]),e._v(" "),r("h2",{attrs:{id:"개념"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#개념"}},[e._v("#")]),e._v(" 개념")]),e._v(" "),r("p",[e._v("Scheduler는 DAG 파일을 파싱하고, 모든 Task와 DAG들을 모니터링하며, Task Instance와 Dag Run들의 스케줄링 및 오케스트레이션을 담당합니다.\n이 외에도 많은 기능을하며, Airflow에서 가장 중요한 컴포넌트라고 할 수 있습니다.")]),e._v(" "),r("p",[e._v("Scheduler는 다음과 같은 일들을 합니다.")]),e._v(" "),r("ul",[r("li",[e._v("Dag Directory에서 파일을 처리하고 결과를 얻는 일")]),e._v(" "),r("li",[e._v("DAG Run과 Task Instance의 상태를 변경하고 Executor가 실행시킬 큐에 Task Instance를 넣는 일")]),e._v(" "),r("li",[e._v("Executor로 스케줄링 큐에 들어온 Task를 실행시키는 일")])]),e._v(" "),r("p",[e._v("여기서 앞에 두 할 일에 대해 좀 더 알아봅시다. (Executor에 대한 내용은 별도로 설명합니다.)")]),e._v(" "),r("h3",{attrs:{id:"dag-directory에서-파일을-처리하고-결과를-얻는-일"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dag-directory에서-파일을-처리하고-결과를-얻는-일"}},[e._v("#")]),e._v(" Dag Directory에서 파일을 처리하고 결과를 얻는 일")]),e._v(" "),r("p",[e._v("Scheduler는 Dag Directory에서 DAG 파일을 모두 읽고 이를 실행한 후, 오류 및 DAG을 Serialized해서 Database에 저장합니다.\n이를 위해 Scheduler는 "),r("code",[e._v("DagFileProcessorManager")]),e._v("라는 서브 프로세스를 만들고, "),r("code",[e._v("DagFileProcessorAgent")]),e._v(" 객체를 통해 이 프로세스와 통신합니다.\n그리고 "),r("code",[e._v("DagFileProcessorManager")]),e._v("는 "),r("code",[e._v("DagFileProcessorProcess")]),e._v(" 라는 서브 프로세스를 만드는데, 이 프로세스에서 구체적으로 DAG을 실행하고 결과를 저장합니다.")]),e._v(" "),r("p",[r("code",[e._v("DagFileProcessorManager")]),e._v("와 "),r("code",[e._v("DagFileProcessorProcess")]),e._v(" 프로세스에 대해 좀 더 알아보겠습니다.")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://airflow.apache.org/docs/apache-airflow/stable/_images/dag_file_processing_diagram.png",alt:""}})]),e._v(" "),r("h4",{attrs:{id:"dagfileprocessormanager"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dagfileprocessormanager"}},[e._v("#")]),e._v(" "),r("code",[e._v("DagFileProcessorManager")])]),e._v(" "),r("ul",[r("li",[e._v("Scheduler에 의해 생성되는 "),r("strong",[e._v("프로세스")]),e._v("입니다.")]),e._v(" "),r("li",[e._v("주기적으로 DAG Directory에 있는 모든 파일의 경로("),r("code",[e._v("file_path")]),e._v(")를 변수에("),r("code",[e._v("file_paths")]),e._v(")에 저장합니다.\n"),r("ul",[r("li",[e._v("이 주기는 "),r("code",[e._v("dag_dir_list_interval")]),e._v(" 설정 값으로 정해지며, 기본 값은 300초입니다.")]),e._v(" "),r("li",[e._v("이 주기를 넘지 않은 채 호출되었다면 이 작업은 스킵합니다.")]),e._v(" "),r("li",[e._v("이 작업으로 인해 DAG Direoctry 내 추가되거나 삭제되는 파일을 Scheduler가 인지할 수 있습니다.")])])]),e._v(" "),r("li",[e._v("주기적으로 위에서 수집한 파일 경로 리스트("),r("code",[e._v("file_paths")]),e._v(")에서 처리해야할 파일 경로들만 별도의 큐("),r("code",[e._v("file_path_queue")]),e._v(")에 저장합니다.\n"),r("ul",[r("li",[e._v("이 주기는 "),r("code",[e._v("min_file_process_interval")]),e._v(" 설정 값으로 정해지며, 기본 값은 30초입니다.")]),e._v(" "),r("li",[e._v("이 주기를 넘지 않은 채 호출되었다면 이 작업은 스킵합니다.")]),e._v(" "),r("li",[e._v("처리해야할 파일 순서는 "),r("code",[e._v("file_parsing_sort_mode")]),e._v(" 설정 값으로 정해지며, 기본 값은 파일의 수정 일시("),r("code",[e._v("modified_time")]),e._v(")입니다.")]),e._v(" "),r("li",[e._v("이 작업으로 인해 수집한 파일 경로 리스트("),r("code",[e._v("file_paths")]),e._v(") 내에 변경된 DAG 코드 및 처리해야할 DAG들을 Scheduler가 인지할 수 있습니다.")])])]),e._v(" "),r("li",[e._v("이후 무한 루프를 돌며 다음 일들을 진행합니다.\n"),r("ul",[r("li",[e._v("처리할 파일 경로를 담은 큐("),r("code",[e._v("file_path_queue")]),e._v(")에서 파일 경로("),r("code",[e._v("file_path")]),e._v(")를 하나씩 꺼내어, "),r("code",[e._v("DagFileProcessorProcess")]),e._v(" 프로세스를 생성하며 넘깁니다.\n"),r("ul",[r("li",[e._v("이 때 "),r("code",[e._v("DagFileProcessorProcess")]),e._v(" 프로세스의 개수가 특정 개수를 넘지 않도록 합니다.")]),e._v(" "),r("li",[e._v("이 특정 개수는 "),r("code",[e._v("parsing_processes")]),e._v(" 설정 값으로 정해지며, 기본 값은 2개입니다.")]),e._v(" "),r("li",[e._v("즉 한번에 "),r("code",[e._v("parsing_processes")]),e._v("의 개수만큼만 "),r("code",[e._v("DagFileProcessorProcess")]),e._v("를 만들며, "),r("code",[e._v("DagFileProcessorProcess")]),e._v("는 하나의 File에 대해서 처리합니다.")])])]),e._v(" "),r("li",[r("code",[e._v("DagFileProcessorProcess")]),e._v("가 완료되길 기다립니다. 완료되면, 그 결과를 기록합니다.")]),e._v(" "),r("li",[e._v("무한 루프 전에 실행한 두 작업(DAG Directory내 파일 경로 읽기와 처리해야할 파일 목록을 만드는 일)을 실행합니다.")]),e._v(" "),r("li",[e._v("좀비 상태인 Task Instance를 찾아 좀비 Task 목록을 변경 합니다.")]),e._v(" "),r("li",[e._v("일정 시간을 넘긴 "),r("code",[e._v("DagFileProcessorProcess")]),e._v(" 프로세스를 죽입니다.\n"),r("ul",[r("li",[e._v("이 일정 시간은 "),r("code",[e._v("dag_file_processor_timeout")]),e._v(" 설정 값으로 정해지며, 기본 값은 50초입니다.")])])]),e._v(" "),r("li",[r("code",[e._v("DagFileProcessorAgent")]),e._v(" 객체(부모 프로세스)에게 모든 파일을 처리했는지 여부를 보냅니다.")])])])]),e._v(" "),r("h4",{attrs:{id:"dagfileprocessorprocess"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dagfileprocessorprocess"}},[e._v("#")]),e._v(" "),r("code",[e._v("DagFileProcessorProcess")])]),e._v(" "),r("ul",[r("li",[r("code",[e._v("DagFileProcessorManager")]),e._v("에 의해 만들어지는 "),r("strong",[e._v("프로세스")]),e._v("입니다.")]),e._v(" "),r("li",[r("code",[e._v("parsing_processes")]),e._v(" 설정 값만큼 프로세스가 생성되며, 기본적으로 2개 생성됩니다.")]),e._v(" "),r("li",[e._v("내부적으로 "),r("code",[e._v("DagFileProcessor")]),e._v(" 객체를 만들어 다음과 같은 일을 합니다.\n"),r("ul",[r("li",[e._v("생성될 때 넘어온 "),r("code",[e._v("file_path")]),e._v("에 해당하는 파일을 실행하고 DAG 인스턴스를 찾습니다.")]),e._v(" "),r("li",[e._v("DAG 인스턴스를 Serialize하고 Database에 저장합니다.")]),e._v(" "),r("li",[e._v("이 과정 중 오류 역시 Database에 저장합니다.")])])])]),e._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),r("p",[e._v("위 내용을 더 깊게 드릴다운 해보고 싶다면 직접 관련 코드를 보시기를 추천합니다.")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/apache/airflow/blob/2.2.3/airflow/dag_processing/manager.py#L86",target:"_blank",rel:"noopener noreferrer"}},[e._v("DagFileProcessorAgent"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/apache/airflow/blob/2.2.3/airflow/dag_processing/manager.py#L383",target:"_blank",rel:"noopener noreferrer"}},[e._v("DagFileProcessorManager"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/apache/airflow/blob/2.2.3/airflow/dag_processing/processor.py#L57",target:"_blank",rel:"noopener noreferrer"}},[e._v("DagFileProcessorProcess"),r("OutboundLink")],1)])])]),e._v(" "),r("h3",{attrs:{id:"dag-run과-task-instance의-상태를-변경하고-executor가-실행시킬-큐에-task-instance를-넣는-일"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dag-run과-task-instance의-상태를-변경하고-executor가-실행시킬-큐에-task-instance를-넣는-일"}},[e._v("#")]),e._v(" DAG Run과 Task Instance의 상태를 변경하고 Executor가 실행시킬 큐에 Task Instance를 넣는 일")]),e._v(" "),r("p",[e._v("Scheduler는 "),r("code",[e._v("DagFileProcessorManager")]),e._v("를 통해 처리해야할 DAG을 Database에 Serialize하는 한편,\n이렇게 Serialized 된 DAG을 찾아 DAG Run과 Task Instance의 상태를 변경하고, Executor가 실행할 Task Instance를 Queue에 보내는 작업도 합니다.")]),e._v(" "),r("p",[e._v("이 과정을 좀 더 구체적으로 설명하면 다음과 같습니다.")]),e._v(" "),r("ul",[r("li",[e._v("무한 루프 안에서 아래 로직을 진행합니다.")]),e._v(" "),r("li",[e._v("Database에서 스케줄링된 DAG을 특정 개수만큼 찾아 "),r("code",[e._v("QUEUED")]),e._v(" 상태인 DAG Run들을 만들고 Database에 저장합니다..\n"),r("ul",[r("li",[e._v("이 특정 개수는 "),r("code",[e._v("max_dagruns_to_create_per_loop")]),e._v(" 설정 값을 통해 지정할 수 있습니다. 기본 값은 10개입니다.")])])]),e._v(" "),r("li",[e._v("Database에서 "),r("code",[e._v("QUEUED")]),e._v(" 상태인 DAG Run들을 찾아 인스턴스로 만들고, "),r("code",[e._v("RUNNING")]),e._v(" 상태로 바꿉니다.")]),e._v(" "),r("li",[r("code",[e._v("RUNNING")]),e._v(" 상태인 Dag Run들의 Task Instance 상태를 Database에서 조사하고, 이 Task Instance의 상태에 따라 DAG Run의 상태를 바꿉니다.\n"),r("ul",[r("li",[e._v("실행할 준비가 된 Task Instance는 "),r("code",[e._v("SCHEDULED")]),e._v(" 상태로 바꿉니다.")])])]),e._v(" "),r("li",[e._v("Executor의 Slot이 남아있는지 확인합니다.\n"),r("ul",[r("li",[e._v("남아있지 않으면 로직을 탈출하여, 다시 루프문 처음부터 진행합니다.")])])]),e._v(" "),r("li",[r("code",[e._v("SCHEDULED")]),e._v(" 상태인 Task Instance를 최대 특정 개수만큼 Executor가 실행할 Queue에 보냅니다.\n"),r("ul",[r("li",[e._v("최대 특정 개수는 "),r("code",[e._v("max_tis_per_query")]),e._v(" 설정 값으로 지정할 수 있습니다. 기본 값은 512개 입니다.")]),e._v(" "),r("li",[e._v("Task Instance의 Priority 값에 따라 Queue에 넣습니다.")])])])]),e._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),r("p",[e._v("위 내용을 더 깊게 드릴다운 해보고 싶다면 직접 관련 코드를 보시기를 추천합니다.")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/apache/airflow/blob/2.2.3/airflow/jobs/scheduler_job.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("SchedulerJob"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/apache/airflow/blob/2.2.3/airflow/models/dagrun.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("DAGRun"),r("OutboundLink")],1)])])]),e._v(" "),r("h2",{attrs:{id:"설정"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#설정"}},[e._v("#")]),e._v(" 설정")]),e._v(" "),r("p",[r("code",[e._v("$AIRFLOW_HOME/airflow.cfg")]),e._v(" 파일에 다음과 같은 설정들을 지정해볼 수 있습니다.")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("[scheduler]\ncatchup_by_default=True\ndag_dir_list_interval=300\nfile_parsing_sort_mode=modified_time\nmax_dagruns_per_loop_to_schedule=20\nmax_dagruns_to_create_per_loop=10\nmax_tis_per_query=512\nmin_file_process_interval=30\norphaned_tasks_check_interval=300\nparsing_processes=2\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br"),r("span",{staticClass:"line-number"},[e._v("9")]),r("br"),r("span",{staticClass:"line-number"},[e._v("10")]),r("br")])]),r("h3",{attrs:{id:"catchup-by-default"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#catchup-by-default"}},[e._v("#")]),e._v(" "),r("code",[e._v("catchup_by_default")])]),e._v(" "),r("p",[r("code",[e._v("BaseOperator")]),e._v(" 생성자의 "),r("code",[e._v("catchup")]),e._v(" 의 기본 값에 대한 설정값 입니다. 기본적으로 "),r("code",[e._v("True")]),e._v("로 설정되어 있습니다.")]),e._v(" "),r("h3",{attrs:{id:"dag-dir-list-interval"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dag-dir-list-interval"}},[e._v("#")]),e._v(" "),r("code",[e._v("dag_dir_list_interval")])]),e._v(" "),r("p",[e._v("DAG Directory에서 얼마나 자주 새로운 파일을 스캔할지에 대한 주기에 대한 설정값 입니다. 기본 값은 300초 입니다.")]),e._v(" "),r("h3",{attrs:{id:"file-parsing-sort-mode"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#file-parsing-sort-mode"}},[e._v("#")]),e._v(" "),r("code",[e._v("file_parsing_sort_mode")])]),e._v(" "),r("p",[e._v("파싱할 DAG 파일의 정렬 방법에 대한 설정값 입니다. 정렬 방법은 3가지가 있습니다.")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("modified_time")]),e._v(" "),r("ul",[r("li",[e._v("파일의 수정 시간을 기준으로 정렬합니다.")]),e._v(" "),r("li",[e._v("대규모에서 최근 수정된 DAG를 먼저 구문 분석하는 데 유용합니다.")])])]),e._v(" "),r("li",[r("code",[e._v("random_seeded_by_host")]),e._v(" "),r("ul",[r("li",[e._v("여러 Scheduler에서 무작위로 정렬하지만 동일한 호스트에서 동일한 순서로 정렬합니다.")]),e._v(" "),r("li",[e._v("이는 각 Scheduler가 다른 DAG 파일을 구문 분석할 수 있는 HA 모드에서 Scheduler와 함께 실행할 때 유용합니다.\n-alphabetical")]),e._v(" "),r("li",[e._v("파일명으로 정렬합니다.")])])])]),e._v(" "),r("p",[e._v("기본 값은 "),r("code",[e._v("modified_time")]),e._v(" 입니다.")]),e._v(" "),r("h3",{attrs:{id:"max-dagruns-per-loop-to-schedule"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#max-dagruns-per-loop-to-schedule"}},[e._v("#")]),e._v(" "),r("code",[e._v("max_dagruns_per_loop_to_schedule")])]),e._v(" "),r("p",[e._v("Scheuler가 한 번의 루프에서 검사(및 잠금)해야 하는 Dag Run의 촤대 개수에 대한 설정값 입니다. 기본 값은 20개입니다.")]),e._v(" "),r("h3",{attrs:{id:"max-dagruns-to-create-per-loop"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#max-dagruns-to-create-per-loop"}},[e._v("#")]),e._v(" "),r("code",[e._v("max_dagruns_to_create_per_loop")])]),e._v(" "),r("p",[e._v("한 번의 Scheduler 루프에서 DAG Run으로 생성할 최대 DAG의 개수에 대한 설정값 입니다. 기본 값은 10개입니다.")]),e._v(" "),r("h3",{attrs:{id:"max-tis-per-query"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#max-tis-per-query"}},[e._v("#")]),e._v(" "),r("code",[e._v("max_tis_per_query")])]),e._v(" "),r("p",[e._v("Executor가 실행할 Queue에 보낼 "),r("code",[e._v("SCHEDULED")]),e._v(" 상태의 Task Instance의 최대 개수에 대한 설정값 입니다. 기본 값은 512개 입니다.")]),e._v(" "),r("h3",{attrs:{id:"min-file-process-interval"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#min-file-process-interval"}},[e._v("#")]),e._v(" "),r("code",[e._v("min_file_process_interval")])]),e._v(" "),r("p",[e._v("스캔한 DAG 파일들에 대해 파싱 및 처리할 주기에 대한 설정값 입니다. 즉 얼마나 자주 DAG File이 업데이트 되었는지를 설정할 수 있습니다. 기본 값은 30초입니다.")]),e._v(" "),r("h3",{attrs:{id:"orphaned-tasks-check-interval"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#orphaned-tasks-check-interval"}},[e._v("#")]),e._v(" "),r("code",[e._v("orphaned_tasks_check_interval")])]),e._v(" "),r("p",[e._v("고아 Task와 Scheduling Job에 대해서 확인하는 주기에 대한 설정값 입니다. 기본값은 300초입니다.")]),e._v(" "),r("h3",{attrs:{id:"parsing-processes"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#parsing-processes"}},[e._v("#")]),e._v(" "),r("code",[e._v("parsing_processes")])]),e._v(" "),r("p",[e._v("DAG 파일을 파싱하고 처리하는 "),r("code",[e._v("DagFileProcessorProcess")]),e._v(" 프로세스의 수에 대한 설정값 입니다. 기본 값은 2개입니다.")]),e._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),r("p",[e._v("Scheduler에 대한 더 많은 설정은 "),r("a",{attrs:{href:"https://airflow.apache.org/docs/apache-airflow/stable/configurations-ref.html#scheduler",target:"_blank",rel:"noopener noreferrer"}},[e._v("공식 문서"),r("OutboundLink")],1),e._v("에서 확인할 수 있습니다.")])]),e._v(" "),r("h2",{attrs:{id:"함께-더-보면-좋은-내용"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#함께-더-보면-좋은-내용"}},[e._v("#")]),e._v(" 함께 더 보면 좋은 내용")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://blog.kk17.net/post/diving-into-airflow-scheduler/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Diving Into Airflow Scheduler"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://www.youtube.com/watch?v=DYC4-xElccE&t=2316s",target:"_blank",rel:"noopener noreferrer"}},[e._v("Deep dive in to the Airflow scheduler - Airflow Summit 2021"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=_.exports}}]);