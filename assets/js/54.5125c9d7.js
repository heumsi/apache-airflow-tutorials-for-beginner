(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{603:function(a,e,r){"use strict";r.r(e);var s=r(35),t=Object(s.a)({},(function(){var a=this,e=a.$createElement,r=a._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"dag-directory"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dag-directory"}},[a._v("#")]),a._v(" DAG Directory")]),a._v(" "),r("h2",{attrs:{id:"개념"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#개념"}},[a._v("#")]),a._v(" 개념")]),a._v(" "),r("p",[a._v("DAG 파일을 저장하는 공간입니다. "),r("code",[a._v("dag_folder")]),a._v(" 혹은 "),r("code",[a._v("dags_folder")]),a._v(" 로도 불립니다.\n기본적으로 "),r("code",[a._v("$AIRFLOW_HOME/dags/")]),a._v(" 가 DAG Directory로 설정되어 있습니다.")]),a._v(" "),r("p",[a._v("DAG을 작성한 후 DAG Directory에 저장하면, Airflow Scheduler가 주기적으로 DAG Directory를 스캔한후 DAG을 파싱해갑니다.\n이 때 DAG 인스턴스만 파싱해가므로, 사실 DAG 그 자체가 아니라, DAG을 구성에 사용할 다른 코드들(Custom Operator나 기타 Python Code들)을 이 안에 넣어도 무방합니다.")]),a._v(" "),r("p",[a._v("또한 다음처럼 DAG Directory 내부가 여러 디렉터리로 구성되어 있어도 Airflow Scheduler는 모든 디렉토리 내부를 탐색하며 파일을 스캔합니다.")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("# $AIRFLOW_HOME/dags/\n\nproject_a/\n  a_1.py\n  a_2.py\nproject_b/\n  b_1.py\n  b_2.py\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br"),r("span",{staticClass:"line-number"},[a._v("3")]),r("br"),r("span",{staticClass:"line-number"},[a._v("4")]),r("br"),r("span",{staticClass:"line-number"},[a._v("5")]),r("br"),r("span",{staticClass:"line-number"},[a._v("6")]),r("br"),r("span",{staticClass:"line-number"},[a._v("7")]),r("br"),r("span",{staticClass:"line-number"},[a._v("8")]),r("br")])]),r("p",[a._v("DAG의 개수가 많아지면 DAG Directory 내부를 어떻게 구조화 할지에 대해서 잘 생각해봐야 합니다.")]),a._v(" "),r("h2",{attrs:{id:"설정"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#설정"}},[a._v("#")]),a._v(" 설정")]),a._v(" "),r("p",[r("code",[a._v("$AIRFLOW_HOME/airflow.cfg")]),a._v(" 파일에 다음과 같은 설정들을 지정해볼 수 있습니다.")]),a._v(" "),r("h3",{attrs:{id:"dags-folder"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dags-folder"}},[a._v("#")]),a._v(" "),r("code",[a._v("dags_folder")])]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("[core]\ndags_folder = ./dags\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br")])]),r("p",[r("code",[a._v("$AIRFLOW_HOME")]),a._v(" 기준 "),r("code",[a._v("./dags")]),a._v(" 경로를 DAG Directory로 설정합니다.")]),a._v(" "),r("h2",{attrs:{id:"airflowignore"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#airflowignore"}},[a._v("#")]),a._v(" "),r("code",[a._v(".airflowignore")])]),a._v(" "),r("p",[r("code",[a._v(".airflowignore")]),a._v(" 는 DAG Directory 내부에 Airflow Scheduler가 스캔하지 않고 무시해야할 파일 목록을 담는 파일입니다.")]),a._v(" "),r("p",[a._v("예를 들어 DAG Directory 내부에 다음과 같이 "),r("code",[a._v(".airflowignore")]),a._v(" 를 정의했다고 해봅시다.")]),a._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("# $AIRFLOW_HOME/dags/.airflowignore\n\na.py\nb/\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br"),r("span",{staticClass:"line-number"},[a._v("3")]),r("br"),r("span",{staticClass:"line-number"},[a._v("4")]),r("br")])]),r("p",[a._v("이 경우 Airflow Scheduler는 DAG Directory 내 "),r("code",[a._v("a.py")]),a._v("와 "),r("code",[a._v("b")]),a._v(" 디렉토리 내 모든 파일을 스캔하지 않고 넘어갑니다.\n이처럼 "),r("code",[a._v(".airflowignore")]),a._v(" 는 스캔하지 않아야할 파일이나 디렉토리가 있을 경우 유용하게 사용할 수 있습니다.")])])}),[],!1,null,null,null);e.default=t.exports}}]);