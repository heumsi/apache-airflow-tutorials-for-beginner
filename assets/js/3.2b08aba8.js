(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{530:function(s,t,a){s.exports=a.p+"assets/img/img.096c1692.png"},531:function(s,t,a){s.exports=a.p+"assets/img/img_1.0afeb08d.png"},532:function(s,t,a){s.exports=a.p+"assets/img/img_2.7baf1bd7.png"},533:function(s,t,a){s.exports=a.p+"assets/img/img_3.682c63f5.png"},534:function(s,t,a){s.exports=a.p+"assets/img/img_4.99517476.png"},535:function(s,t,a){s.exports=a.p+"assets/img/img_5.99680b6e.png"},536:function(s,t,a){s.exports=a.p+"assets/img/img_6.a4aa84f2.png"},537:function(s,t,a){s.exports=a.p+"assets/img/img_7.dd833a72.png"},538:function(s,t,a){s.exports=a.p+"assets/img/img_9.031fb9c4.png"},539:function(s,t,a){s.exports=a.p+"assets/img/img_8.bdcd77fe.png"},540:function(s,t,a){s.exports=a.p+"assets/img/img_10.2f52e595.png"},541:function(s,t,a){s.exports=a.p+"assets/img/img_11.0cacc58a.png"},542:function(s,t,a){s.exports=a.p+"assets/img/img_12.a32f54fe.png"},543:function(s,t,a){s.exports=a.p+"assets/img/img_13.56eb5d27.png"},544:function(s,t,a){s.exports=a.p+"assets/img/img_14.b28fef4b.png"},545:function(s,t,a){s.exports=a.p+"assets/img/img_15.59fa775e.png"},546:function(s,t,a){s.exports=a.p+"assets/img/img_16.91464805.png"},547:function(s,t,a){s.exports=a.p+"assets/img/img_17.b101b6ae.png"},548:function(s,t,a){s.exports=a.p+"assets/img/img_18.4fea3ffc.png"},549:function(s,t,a){s.exports=a.p+"assets/img/img_19.8404f67e.png"},550:function(s,t,a){s.exports=a.p+"assets/img/img_20.32dfc4c2.png"},649:function(s,t,a){"use strict";a.r(t);var n=a(35),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"gcp-cloud-composer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gcp-cloud-composer"}},[s._v("#")]),s._v(" GCP - Cloud Composer")]),s._v(" "),n("h2",{attrs:{id:"개요"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#개요"}},[s._v("#")]),s._v(" 개요")]),s._v(" "),n("p",[s._v("GCP Cloud Composer는 GCP에서 제공하는 Managed Airflow 서비스 입니다. 여기서는 어떻게 사용할 수 있는지 간략하게 살펴보겠습니다.")]),s._v(" "),n("h2",{attrs:{id:"cloud-composer-인스턴스-만들기"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cloud-composer-인스턴스-만들기"}},[s._v("#")]),s._v(" Cloud Composer 인스턴스 만들기")]),s._v(" "),n("p",[s._v('먼저 GCP 웹 콘솔에 접속하여 메뉴에서 "빅 데이터" 탭에 있는 "Composer"를 찾습니다.')]),s._v(" "),n("p",[n("img",{attrs:{src:a(530),alt:"img.png"}})]),s._v(" "),n("p",[s._v('다음과 같이 "Cloud Composer API" 화면에서 "사용" 버튼을 누릅니다.')]),s._v(" "),n("p",[n("img",{attrs:{src:a(531),alt:"img_1.png"}})]),s._v(" "),n("p",[s._v('다음과 같은 첫 화면에서 "CREATE ENVIRONMENT" 버튼을 누르고, "Composer 2"를 선택합니다.')]),s._v(" "),n("p",[n("img",{attrs:{src:a(532),alt:"img_2.png"}})]),s._v(" "),n("p",[s._v("각 폼에 다음과 같은 값을 입력합니다.")]),s._v(" "),n("p",[n("img",{attrs:{src:a(533),alt:"img_3.png"}})]),s._v(" "),n("p",[n("img",{attrs:{src:a(534),alt:"img_4.png"}})]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),n("p",[s._v('실제 운영 환경에서 배포할 때는 "네트워크 구성" 항목에서 "네트워크(VPC)"와 "서브 네트워크(Subnet)"를 명확히 잡아주는 것이 좋습니다.\n(default를 사용하는 것은 지양해야 하고, 아직 default 밖에 없다면, VPC와 Subnet 구성부터 하시기를 권장드립니다.)')]),s._v(" "),n("p",[s._v("여기에서는 간단히 Cloud Composer를 둘러보는 것이 목표이기에, 세부적인 사항은 설정하지 않았습니다.")]),s._v(" "),n("p",[n("img",{attrs:{src:a(535),alt:"img_5.png"}})])]),s._v(" "),n("p",[s._v('"만들기" 버튼을 누르면 아래 사진처럼 Cloud Composer 인스턴스 생성이 시작됩니다. 생성 완료까지 시간이 조금 걸리므로, 커피 한잔 하고 오시면 좋을거 같습니다. ☕️')]),s._v(" "),n("p",[n("img",{attrs:{src:a(536),alt:"img_6.png"}})]),s._v(" "),n("p",[s._v("생성이 완료되면 다음과 같은 화면이 등장합니다.")]),s._v(" "),n("p",[n("img",{attrs:{src:a(537),alt:"img_7.png"}})]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),n("p",[s._v("Cloud Composer 인스턴스 생성은 GCP의 Managed Kubernetes 서비스인 GKE(Google Kubernetes Engine) 인스턴스를 생성하고, 이 클러스터 위에\nAirflow Helm Chart를 배포하는 과정을 거칩니다. 따라서 결과적으로 Kubernetes 환경에서 Airflow를 배포하는 모양입니다.")]),s._v(" "),n("p",[s._v("실제로 GCP 웹 콘솔에서 Kubernetes Engine 페이지에 접속하면 다음과 같이 GKE 인스턴스가 만들어진 것을 볼 수 있습니다.")]),s._v(" "),n("p",[n("img",{attrs:{src:a(538),alt:"img_9.png"}})])]),s._v(" "),n("h2",{attrs:{id:"cloud-composer-대시보드-둘러보기"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cloud-composer-대시보드-둘러보기"}},[s._v("#")]),s._v(" Cloud Composer 대시보드 둘러보기")]),s._v(" "),n("p",[s._v('인스턴스 이름을 클릭하면 다음과 같이 "모니터링" 탭 화면에 진입하게 됩니다.')]),s._v(" "),n("p",[n("img",{attrs:{src:a(539),alt:"img_8.png"}})]),s._v(" "),n("p",[s._v('"로그" 탭 화면에서는 다음처럼 Airflow의 각 컴포넌트들(정확히는 GKE 클러스터에 배포된 Pod들)의 로그를 확인할 수 있습니다.')]),s._v(" "),n("p",[n("img",{attrs:{src:a(540),alt:"img_10.png"}})]),s._v(" "),n("p",[s._v('"DAG" 탭 화면에서는 다음처럼 DAG에 대한 간략한 정보를 볼 수 있습니다.')]),s._v(" "),n("p",[n("img",{attrs:{src:a(541),alt:"img_11.png"}})]),s._v(" "),n("p",[s._v('"Environment Configuration" 탭 화면에서는 다음처럼 환경 구성 값에 대한 정보를 볼 수 있습니다.')]),s._v(" "),n("p",[n("img",{attrs:{src:a(542),alt:"img_12.png"}})]),s._v(" "),n("p",[s._v('"Airflow 구성 재정의" 탭 화면에서는 Airflow 설정 값들을 입력할 수 있습니다.')]),s._v(" "),n("p",[n("img",{attrs:{src:a(543),alt:"img_13.png"}})]),s._v(" "),n("p",[s._v('"환경 변수" 탭 화면에서는 Airflow 각 컴포넌트에 들어갈 환경 변수를 입력할 수 있습니다.')]),s._v(" "),n("p",[n("img",{attrs:{src:a(544),alt:"img_14.png"}})]),s._v(" "),n("p",[s._v('"Pypi Packages" 탭 화면에서는 Airflow 컴포넌트에 설치할 파이썬 패키지를 입력할 수 있습니다.')]),s._v(" "),n("p",[n("img",{attrs:{src:a(545),alt:"img_15.png"}})]),s._v(" "),n("p",[s._v('위 쪽의 "Airflow UI 열기" 버튼을 클릭하면 다음처럼 웹 UI 페이지에 접속할 수 있습니다.')]),s._v(" "),n("p",[n("img",{attrs:{src:a(546),alt:"img_16.png"}})]),s._v(" "),n("h2",{attrs:{id:"dag-업로드-하기"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dag-업로드-하기"}},[s._v("#")]),s._v(" DAG 업로드 하기")]),s._v(" "),n("p",[s._v('다음과 같이 Cloud Composer 메인 화면에서 "DAG" 버튼을 눌러봅시다.')]),s._v(" "),n("p",[n("img",{attrs:{src:a(547),alt:"img_17.png"}})]),s._v(" "),n("p",[s._v("그러면 다음과 같이 GCS(Google Cloud Storage)의 특정 버킷으로 접속되는데, 이처럼 Cloud Composer에서 DAG Directory로 GCS 버킷을 사용합니다.")]),s._v(" "),n("p",[n("img",{attrs:{src:a(548),alt:"img_18.png"}})]),s._v(" "),n("p",[s._v("따라서 DAG 작성 후 GCS 버킷에 업로드 해야합니다. 업로드 하는 간단한 과정을 살펴봅시다.")]),s._v(" "),n("p",[s._v("먼저 로컬에서 다음과 같은 DAG 파일을 작성한 뒤 "),n("code",[s._v("hello_world.py")]),s._v(" 로 저장합니다.")]),s._v(" "),n("div",{staticClass:"language-py line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" datetime "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" timedelta\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" airflow "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" DAG\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" airflow"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("operators"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("bash "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" BashOperator\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" airflow"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("operators"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("python "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" PythonOperator\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" airflow"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("utils"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("dates "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" days_ago\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("print_world")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"world"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# with 구문으로 DAG 정의를 시작합니다.")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" DAG"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    dag_id"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello_world"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# DAG의 식별자용 아이디입니다.")]),s._v("\n    description"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"My First DAG"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# DAG에 대해 설명합니다.")]),s._v("\n    start_date"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("days_ago"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# DAG 정의 기준 2일 전부터 시작합니다.")]),s._v("\n    schedule_interval"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("timedelta"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("days"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1일을 주기로 실행합니다.")]),s._v("\n    tags"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"examples"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" dag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Task를 정의합니다.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# bash 커맨드로 echo hello 를 실행합니다.")]),s._v("\n    t1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" BashOperator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n        task_id"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"print_hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        bash_command"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"echo Hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        owner"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"heumsi"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 이 작업의 오너입니다. 보통 작업을 담당하는 사람 이름을 넣습니다.")]),s._v("\n        retries"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 이 Task가 실패한 경우, 3번 재시도 합니다.")]),s._v("\n        retry_delay"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("timedelta"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("minutes"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 재시도하는 시간 간격은 5분입니다.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Task를 정의합니다.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# python 함수 print_world를 실행합니다.")]),s._v("\n    t2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" PythonOperator"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n        task_id"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"print_world"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        python_callable"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("print_world"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        owner"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"heumsi"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        retries"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        retry_delay"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("timedelta"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("minutes"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Task 의존성(순서)를 정합니다.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# t1 실행 후 t2를 실행합니다.")]),s._v("\n    t1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" t2\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br")])]),n("p",[s._v('그 뒤 다음처럼 GCS 버킷에서 "파일 업로드" 버튼을 눌러 '),n("code",[s._v("hello_world.py")]),s._v("를 업로드 합니다.")]),s._v(" "),n("p",[n("img",{attrs:{src:a(549),alt:"img_19.png"}})]),s._v(" "),n("p",[s._v("웹 UI에 접속해보면 다음처럼 DAG이 잘 생성된 것을 확인할 수 있습니다.")]),s._v(" "),n("p",[n("img",{attrs:{src:a(550),alt:"img_20.png"}})]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),n("p",[s._v("버킷에 업로드 후 웹 UI에 등장까지 시간이 조금 걸릴 수 있습니다. 등장하지 않는다면 조금만 기다려 주세요.")])])])}),[],!1,null,null,null);t.default=r.exports}}]);